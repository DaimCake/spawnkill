- Documentation de la structure actuelle et future du serveur
	toute la communication se fait en messages JSON
	serveur principal : MainSocketServer
		chargé de gérer les utilisateurs et les topics qu'ils suivent
	script update-topics-client.js : client node js demandant à MainSocketServer d'informer les utilisateurs de la mise à jour des topics
		MainSocketServer délégue la récupération des infos à UpdateTopicsServer pour ne pas bloquer le serveur
			passage de l'état actuel des topics en PHP sérialisé
			communication via update-to-server-link.js (lien entre les deux serveurs)

Client :
	SocketConnection
		Lance le client
		Etat connecté

		Interaction
			Permet aux autre modules de réagir aux messages (action)
				Ajoute le module aux messages suivi
				données du type : {
					actionName: [function1, function2],
					action2: [otherFunction]
				}

			Permet aux autres modules de réagir à la déconnexion
				bind action à la deconnexion
				données du type: [function, function2]

			Permet aux autres modules de réagir à la connexion
				Si connecté
					Action lancée directement
				Sinon
					Action lancée à la connexion
					données du type: [function, function2]

			Permet aux autres modules d'envoyer des messages
				du type action/données

		on connect
			scripts lancés à la connexion

		on message
			décomposition du message (action/données)
			appelle des éventuelles fonctions liées à l'action
